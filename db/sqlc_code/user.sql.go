// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package sqlc_code

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    email
)
VALUES (
    $1, $2, $3
) RETURNING id,username,email,created_at
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

type CreateUserRow struct {
	ID        int32
	Username  string
	Email     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, created_at, verified FROM users
where email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.Verified,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, created_at, verified FROM users
where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.Verified,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :execrows
UPDATE users
SET verified = true
WHERE id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, verifyUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
