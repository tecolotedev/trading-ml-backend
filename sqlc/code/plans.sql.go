// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: plans.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllPlans = `-- name: GetAllPlans :many
SELECT id, name, max_historical_bars, max_symbols, max_indicators_per_symbol, max_models, created_at, last_updated FROM plans
`

func (q *Queries) GetAllPlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.Query(ctx, getAllPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MaxHistoricalBars,
			&i.MaxSymbols,
			&i.MaxIndicatorsPerSymbol,
			&i.MaxModels,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlanById = `-- name: GetPlanById :one
SELECT id, name, max_historical_bars, max_symbols, max_indicators_per_symbol, max_models, created_at, last_updated FROM plans
where id = $1
`

func (q *Queries) GetPlanById(ctx context.Context, id int32) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlanById, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxHistoricalBars,
		&i.MaxSymbols,
		&i.MaxIndicatorsPerSymbol,
		&i.MaxModels,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getPlanByName = `-- name: GetPlanByName :one
SELECT id, name, max_historical_bars, max_symbols, max_indicators_per_symbol, max_models, created_at, last_updated FROM plans
where name = $1
`

func (q *Queries) GetPlanByName(ctx context.Context, name pgtype.Text) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlanByName, name)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxHistoricalBars,
		&i.MaxSymbols,
		&i.MaxIndicatorsPerSymbol,
		&i.MaxModels,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
